{
  "id": "ada",
  "prelude": "",
  "template": "(* Vous pouvez entrer du code ici et l'évaluer avec le bouton en bas *)\n\n(* RAPPELS DE SYNTAXE *)\n\n(* Déclarer une valeur globale *)\nlet n = 3;;\n\n(* Déclarer une valeur locale *)\nlet n = 3 in\n  let m = 4 in\n  n + m ;;\n\n(* Déclarer une fonction *)\nlet ma_fonction x = 2 * x;;\n\n(* Appeler une fonction : pas de parenthèse ! *)\nma_fonction 4;;\n\n(* La liste vide *)\n[];;\n\n(* Une liste avec 1 élément *)\n[1];;\n\n(* Une liste avec plusieurs élément *)\nlet l = [2;3;1];;\n\n(* Construire une liste avec `::` *)\nlet ma_liste = 2::3::1::[];;\n\n(* C'est bien la même chose *)\nl = ma_liste;;\n\n(* Pattern matching sur les listes *)\nlet liste_match l =\n  match l with\n  | [] -> print_string \"La liste est vide\"\n  | x :: tl -> print_string \"La liste contient 1 élément et plus\"\n\n(* Fonction [head] vue dans les slides *)\nlet head l =\n  match l with\n  | [] -> failwith \"La liste est vide et n'a dont pas de tête !\"\n  | x :: tl -> x\n\n(* Fonction [aff] vue dans les slides, à compléter ! *)\nlet rec aff l =\n  match l with\n  | [] -> failwith \"Retirez ce failwith et complétez la ligne...\"\n  | x :: tl -> failwith \"Retirez ce failwith et complétez la ligne...\"\n\n"
}